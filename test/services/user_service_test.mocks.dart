// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_mockito/test/services/user_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_mockito/models/user.dart' as _i3;
import 'package:flutter_mockito/services/http_service.dart' as _i2;
import 'package:flutter_mockito/services/user_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpService_0 extends _i1.SmartFake implements _i2.HttpService {
  _FakeHttpService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_1 extends _i1.SmartFake implements _i3.User {
  _FakeUser_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i4.UserService {
  @override
  _i2.HttpService get httpService => (super.noSuchMethod(
        Invocation.getter(#httpService),
        returnValue: _FakeHttpService_0(
          this,
          Invocation.getter(#httpService),
        ),
        returnValueForMissingStub: _FakeHttpService_0(
          this,
          Invocation.getter(#httpService),
        ),
      ) as _i2.HttpService);

  @override
  _i5.Future<_i3.User> getUser(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [id],
        ),
        returnValue: _i5.Future<_i3.User>.value(_FakeUser_1(
          this,
          Invocation.method(
            #getUser,
            [id],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i3.User>.value(_FakeUser_1(
          this,
          Invocation.method(
            #getUser,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.User>);

  @override
  _i5.Future<List<_i3.User>> getUsers(String? search) => (super.noSuchMethod(
        Invocation.method(
          #getUsers,
          [search],
        ),
        returnValue: _i5.Future<List<_i3.User>>.value(<_i3.User>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i3.User>>.value(<_i3.User>[]),
      ) as _i5.Future<List<_i3.User>>);
}
